import os
import openai
import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
print("TELEGRAM_TOKEN:", TELEGRAM_TOKEN)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
bot = Bot(token=TELEGRAM_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = openai.OpenAI(api_key=OPENAI_API_KEY)

# –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –±–æ—Ç–∞
PSYCHOLOGIST_PROMPT = """
You are a professional psychologist with many years of experience:: 
Your job is to provide friendly, supportive, and meaningful responses:: 
You use cognitive behavioral therapy (CBT) and active listening techniques::
Answer calmly, respectfully and with care for the client:: Form answers that are short and complete in meaning, 
avoid interruptions mid-sentence, keep the meaning within 500 tokens:: Answer in Russian.
"""

async def ask_chatgpt(user_message: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ ChatGPT –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    try:
        response = client.chat.completions.create(  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –≤—ã–∑–æ–≤–∞ OpenAI API
            model="gpt-4",
            messages=[
                {"role": "system", "content": PSYCHOLOGIST_PROMPT},
                {"role": "user", "content": user_message}
            ],
            max_tokens=500
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

@dp.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start"""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Å–∏—Ö–æ–ª–æ–≥-–±–æ—Ç. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ üòä"
    )

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å –ø–æ–º–æ—â—å—é ChatGPT."""
    user_text = message.text.strip()
    response = await ask_chatgpt(user_text)
    await message.answer(response)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ."""
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
